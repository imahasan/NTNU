[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('platform:/plugin/tdt4250.studyprogramme.model/model/studyprogramme.ecore', 'http://www.eclipse.org/emf/2002/Ecore')]

[import tdt4250::studyprogramme::html::common::utils /]

[**
 * The documentation of the template generateElement.
 * @param anUOD
 */]
[template public generateElement(anUOD : UOD)]
[comment @main/]
[file ('programmes.html', false, 'UTF-8')]
<html>
<head>
	<title>Studyprogrammes</title>
	<meta charset="utf-8"/>
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
	
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
	
	<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
	
	<style>
		.container {
			width: 70%;
			margin: 0 auto;
		}
		
		.spes-select {
			font-size: 1.5em;		
		}

        .dropdown {
            height: 2.5rem;
            top: -0.5rem;
        }
	</style>

	<script type="text/javascript">
		$( document ).ready(function() {
			$('.selectpicker.specialisation').on('change', function(){
				let selectedID = $(this).val();
				
				let year = $(this).closest('.year')
				year.siblings('.year').removeClass("collapse");
				year.removeClass("collapse");
				year.nextAll('.year').addClass("collapse");
				if (selectedID != "null") year.next('.year').removeClass("collapse");
				
				let specialisations = $(this).closest('.study_programme').find('.specialisation');
				specialisations.addClass("collapse");
				let selectedSpesialisation = specialisations.each(function(elem){
				    if($(this).attr('id') == selectedID) {
						$(this).removeClass("collapse");			
					}; 	
				});
			})

			$('.selectpicker.academic_year').on('change', function(){
				let selectedID = $(this).val();
				let academicYears = $(this).closest('.study_programme').find('.academic_year');
				academicYears.addClass("collapse");
				let selectedAcademicYear = academicYears.each(function(elem){
				    if($(this).attr('id') == selectedID) {
						$(this).removeClass("collapse");			
					}; 	
				});				
			})
		});
	</script>
	
</head>
<body>
	<div class="container">
		[for (programme: Programme | anUOD.programmes)]
			[generate(programme)/]
		[/for]
		</div>
	</body>
</html>
[/file]
[/template]

[template public generate(programme: Programme)]
<div class="study_programme mb-5">
	<h1>[programme.name/] ([programme.code/])</h1>
	<hr/>

	<h2 class="d-inline">Class of </h2>
	<select class="academic_year selectpicker" data-live-search="true" data-style="spes-select btn-light">
		<option value="null">Select year</option>
		[for (academicYear: AcademicYear | programme.academicYears)]
			<option value="[getNameID(academicYear.oclAsType(EObject))/]">[academicYear.fromYear/]</option>
		[/for]
	</select>

	[for (academicYear: AcademicYear | programme.academicYears)]
		[generate(academicYear)/]
	[/for]
</div>
[/template]

[template public generate(academicYear: AcademicYear)]
<div class="academic_year collapse" id="[getNameID(academicYear.oclAsType(EObject))/]">
	[for (year : Integer | getCourseCombinationYears(academicYear.courseCombinations))]
		[generateYear(year, academicYear.courseCombinations)/]
	[/for]
</div>
[/template]

[template public generateYear(year : Integer, courseCombinations: OrderedSet(CourseCombination),)]
[if (year = 1)]
	<div class="year">
[else]
	<div class="year collapse">
[/if]
	<h2 class="mt-5">[year/]. Year</h2>

	[if (containsSpecialisation(filterCourseCombinationsByFromYear(courseCombinations, year)))]		
	<select class="mt-3 specialisation selectpicker" data-live-search="true" data-style="spes-select btn-light" data-width="100%">
		<option value="null">Select specialisation</option>
	[/if]
		[for (courseCombination: CourseCombination | getCourseCombinationsByFromYear(courseCombinations, year))]
			[if (courseCombination.specialisation->notEmpty() and isTermInYear(courseCombination.fromTerm, year))]
				<option value="[getNameID(courseCombination.oclAsType(EObject))/]">[courseCombination.specialisation.specialisation/]</option>
			[/if]
		[/for]
	[if (containsSpecialisation(filterCourseCombinationsByFromYear(courseCombinations, year)))]
	</select>
	[/if]

	[for (courseCombination: CourseCombination | getCourseCombinationsByFromYear(courseCombinations, year))]
		[generate(courseCombination, year)/]
	[/for]
</div>
[/template]


[template public generate(courseCombination: CourseCombination, year : Integer) ? (courseCombination.specialisation->notEmpty())
	{
		seasonOffset : Season = courseCombination.ancestors(AcademicYear).fromSeason->first();
		 
	}] 
<div class="collapse specialisation" id="[getNameID(courseCombination.oclAsType(EObject))/]">
	[for (term: Integer | getCourseCombinationTerms(filterCourseCombinationsByFromYear(courseCombination.courseCombinations, year)))]	
		<div class="mt-5 text-muted row">
			<div class="col">
				<h3>[getSeason(seasonOffset, term).toString().toUpperFirst()/]</h3>
			</div>
			<div class="col">
				<h4 class="text-right">([term/]. term)</h4>
			</div>
		</div>
		[for (courseCombination : CourseCombination | filterCourseCombinationsByCourseGroupsTerm(courseCombination.courseCombinations, term))]
			[generate(courseCombination, term)/]
		[/for]
	[/for]
</div>
[/template]

[comment Maybe handle generate(courseCombination: CourseCombination, year : Integer) ??  /]

[template public generate(courseCombination: CourseCombination, term : Integer)]
<div class="course_combination">
	<h4>[courseCombination.name/]</h4>		
	<table class="table">
		<thead class="text-left">
			<tr><th>Code</th><th>Name</th><th>Credits</th><th>Status</th></tr>
		</thead>
		<tbody>
			[for (courseGroup: CourseGroup | filterCourseGroupsByTerm(courseCombination.courseGroups, term))]
				[generate(courseGroup)/]
			[/for]
		</tbody>
	</table>
</div>
[/template]


[template public generate(courseGroup: CourseGroup)
	{
		courses : OrderedSet(Course) = courseGroup.getCourses();
	}]
		[for (course: Course | courses)]
		<tr><td><a target="_blank" href="https://www.ntnu.edu/studies/courses/[course.code/]">[course.code/]</a></td><td>[course.name/]</td><td>[course.credits/]</td><td>[courseGroup.status/]</td></tr>
		[/for]

[/template]

[query public filterCourseGroupsByTerm(courseGroups : OrderedSet(CourseGroup), term : Integer) : OrderedSet(CourseGroup) =
	courseGroups->select( cg | cg.fromTerm = term) 
/]

[query public getCourseCombinationTerms(courseCombinations : OrderedSet(CourseCombination)) : Set(Integer) =
	courseCombinations.eAllContents(CourseGroup)->collect( cg | cg.fromTerm)->asSet()
/]

[query public getCourseCombinationYears(courseCombinations : OrderedSet(CourseCombination)) : Set(Integer) =
	courseCombinations.eAllContents(CourseGroup)->collect( cg | cg.fromTerm)->collect(i | termToYearNumber(i))->asSet()
/]

[query public filterCourseCombinationsByCourseGroupsTerm(courseCombinations : OrderedSet(CourseCombination), term : Integer) : OrderedSet(CourseCombination) =
	courseCombinations->select(cc | cc.eAllContents(studyprogramme::CourseGroup)->collect( cg | cg.fromTerm)->asSet()->includes(term))
/]

[query public getCourseCombinationsByFromYear(courseCombinations : OrderedSet(CourseCombination), year : Integer) : OrderedSet(CourseCombination) =
	courseCombinations->select(cc | yearToTerm(year)->any(y | y >= cc.fromTerm) <> null )
/]

[query public filterCourseCombinationsByFromYear(courseCombinations : OrderedSet(CourseCombination), year : Integer) : OrderedSet(CourseCombination) =
	courseCombinations->select(cc | yearToTerm(year)->any(y | y = cc.fromTerm) <> null )
/]

[query public isTermInYear(term : Integer, year : Integer) : Boolean =
	yearToTerm(year)->any(y | term->includes(y)) <> null
/]

[query public containsSpecialisation(courseCombination : OrderedSet(CourseCombination)) : Boolean =
	courseCombination->select(cc | cc.specialisation->notEmpty())->notEmpty()
/]
